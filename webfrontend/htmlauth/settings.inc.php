<?php
// Shared settings helpers for Scripthub

// Plugin data dir (keep stable; you can change if needed)
$dataDir      = "/opt/loxberry/data/plugins/scripthub";
$settingsFile = "$dataDir/settings.json";
$metaFile     = "$dataDir/scripthub.json"; // existing meta (modes/schedules)

// Defaults
function sh_settings_defaults(string $dataDir): array {
    return [
        "paths" => [
            // Where to scan for scripts
            "script_dir"   => $dataDir,
            // Where logs from nohup/cron go
            "log_file"     => "$dataDir/scripthub_cron.log",
            // Where flock locks live (non-root, safe)
            "lock_dir"     => "$dataDir/locks",
            // Where to save a preview of generated cron
            "cron_preview" => "$dataDir/scripthub.cron.preview",
            // Where to APPLY cron (cron actually reads this). You can change to /etc/cron.d/scripthub
            "cron_target"  => "/etc/cron.d/scripthub",
        ],
        "runtime" => [
            // Run cron jobs as this user (kept implicit in /etc/cron.d entries)
            "cron_user" => "loxberry",
            // Environment headers
            "env" => [
                "MAILTO" => "",
                "SHELL"  => "/bin/bash",
                "PATH"   => "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
            ],
            // Overlap behavior: skip (non-blocking flock) or queue (blocking)
            "overlap" => "skip",
        ],
        "logging" => [
            // Use ISO timestamps (no % in cron lines)
            "ts_format" => "iso",
            // Log when a tick was skipped due to lock
            "log_skipped" => true,
        ],
    ];
}

function sh_settings_load(string $settingsFile, string $dataDir): array {
    $d = sh_settings_defaults($dataDir);
    if (is_readable($settingsFile)) {
        $j = json_decode(@file_get_contents($settingsFile), true);
        if (is_array($j)) {
            // recursive merge
            $d = array_replace_recursive($d, $j);
        }
    }
    return $d;
}

function sh_settings_save(string $settingsFile, array $cfg): void {
    @file_put_contents($settingsFile, json_encode($cfg, JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES));
}

// Utilities used by index.php and settings.php
function sh_which($bin, $fallback) {
    $p = trim((string)@shell_exec('command -v '.escapeshellarg($bin).' 2>/dev/null'));
    return $p !== '' ? $p : $fallback;
}
function sh_script_interpreter_cmd($scriptPath) {
    // safely double-quote
    $dq = fn($s) => '"' . str_replace(['\\','"'], ['\\\\','\\"'], $s) . '"';
    $ext = strtolower(pathinfo($scriptPath, PATHINFO_EXTENSION));
    if ($ext === 'php') {
        $php = sh_which('php', '/usr/bin/php');
        return $php . ' ' . $dq($scriptPath);
    } elseif ($ext === 'py') {
        $py = sh_which('python3', '/usr/bin/python3');
        return $py . ' ' . $dq($scriptPath);
    } elseif ($ext === 'sh') {
        $bash = sh_which('bash', '/bin/bash');
        return $bash . ' ' . $dq($scriptPath);
    } else {
        return $dq($scriptPath);
    }
}

/** Build cron file text from meta + settings */
function sh_build_cron_file(array $meta, array $settings): string {
    $dq = fn($s) => '"' . str_replace(['\\','"'], ['\\\\','\\"'], $s) . '"';

    $lines = [];
    $lines[] = '# Generated by Scripthub';
    foreach ($settings['runtime']['env'] as $k => $v) {
        $lines[] = $k . '=' . $dq($v);
    }
    $lines[] = '';

    $scriptDir = rtrim($settings['paths']['script_dir'], '/');
    $logfile   = $settings['paths']['log_file'];
    $lockDir   = rtrim($settings['paths']['lock_dir'], '/');
    $user      = $settings['runtime']['cron_user'];
    $skip      = ($settings['runtime']['overlap'] ?? 'skip') === 'skip';
    $logSkipped= !empty($settings['logging']['log_skipped']);

    foreach ($meta as $script => $cfg) {
        if (!is_array($cfg) || ($cfg['mode'] ?? 'manual') !== 'cron') continue;
        $expr = trim($cfg['cron_expr'] ?? ''); if ($expr === '') continue;

        $scriptPath = $scriptDir . '/' . $script;
        if (!is_file($scriptPath)) continue;

        $cmd = sh_script_interpreter_cmd($scriptPath);

        // No % in cron payload (use ISO date)
        $tsStart = 'echo "$(date -Iseconds) === Started (cron) '.$script.' ===" >> '.$dq($logfile);
        $tsEnd   = 'echo "$(date -Iseconds) --- Finished (cron) '.$script.' (rc=$rc) ---" >> '.$dq($logfile);

        $bashBlock = $tsStart.'; '.$cmd.' >> '.$dq($logfile).' 2>&1; rc=$?; '.$tsEnd.'; exit $rc';
        $lockPath  = $dq($lockDir . '/scripthub.' . preg_replace('/[^A-Za-z0-9_.-]/','_', $script) . '.lock');

        $flockCmd  = '/usr/bin/flock ' . ($skip ? '-n ' : '') . $lockPath . ' -c ' . escapeshellarg($bashBlock);
        if ($skip && $logSkipped) {
            $flockCmd .= ' || echo "$(date -Iseconds) --- Skipped (locked) '.$script.' ---" >> '.$dq($logfile);
        }

        $lines[] = "$expr $user $flockCmd";
        $lines[] = '';
    }

    return implode("\n", $lines) . "\n";
}

/** Apply cron: write target file (or sudo), ensure paths, reload service */
function sh_apply_cron(array $meta, array $settings): array {
    $dataDir    = dirname($settings['paths']['log_file']); // best-guess
    $cronText   = sh_build_cron_file($meta, $settings);
    $preview    = $settings['paths']['cron_preview'];
    $target     = $settings['paths']['cron_target'];
    $lockDir    = $settings['paths']['lock_dir'];
    $logfile    = $settings['paths']['log_file'];

    // Ensure dirs/files exist & permissive for loxberry runs
    if (!is_dir($lockDir)) @mkdir($lockDir, 0777, true);
    @chmod($lockDir, 0777);
    if (!file_exists($logfile)) @touch($logfile);
    @chmod($logfile, 0666);
    @file_put_contents($preview, $cronText);

    // If target isn't under /etc/cron.d, we still write it, but cron won't read it
    $wrote = @file_put_contents($target, $cronText) !== false;
    if ($wrote) {
        @chmod($target, 0644);
        @exec('systemctl reload cron 2>/dev/null || service cron reload 2>/dev/null || true');
        return [true, "Cron applied to $target"];
    }

    // sudo fallback
    $tmp = tempnam(sys_get_temp_dir(), 'scripthub_cron_');
    @file_put_contents($tmp, $cronText);
    $cmd = 'sudo /bin/cp ' . escapeshellarg($tmp) . ' ' . escapeshellarg($target)
         . ' && sudo /bin/chmod 644 ' . escapeshellarg($target)
         . ' && sudo /bin/chown root:root ' . escapeshellarg($target)
         . ' && (systemctl reload cron 2>/dev/null || service cron reload 2>/dev/null || true)';
    $out=[]; $rc=0; @exec($cmd, $out, $rc); @unlink($tmp);

    if ($rc === 0) {
        return [true, "Cron applied to $target (via sudo)"];
    }
    return [false, "Could not write $target. Preview saved at $preview"];
}
